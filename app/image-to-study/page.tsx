"use client"

import * as React from "react"
import { Upload, FileText, Brain, BookOpen, HelpCircle, CheckCircle, Loader2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { PdfDropzone } from "@/components/pdf-dropzone"
import { cn } from "@/lib/utils"
import { useToast } from "@/hooks/use-toast"

type ProcessingStep = "upload" | "extract" | "generate" | "complete"

export default function ImageToStudyPage() {
  const { toast } = useToast()
  const [currentStep, setCurrentStep] = React.useState<ProcessingStep>("upload")
  const [selectedFile, setSelectedFile] = React.useState<File | null>(null)
  const [extractedText, setExtractedText] = React.useState<string>("")
  const [generatedSummary, setGeneratedSummary] = React.useState<any>(null)
  const [generatedQuiz, setGeneratedQuiz] = React.useState<any>(null)
  const [isProcessing, setIsProcessing] = React.useState(false)

  const handleFileSelect = (file: File) => {
    setSelectedFile(file)
    setCurrentStep("upload")
    setIsProcessing(true)
  }

  const handleUploadComplete = async (result: { fileUrl: string; extractedText: string; fileName: string }) => {
    setExtractedText(result.extractedText)
    setCurrentStep("extract")
    
    toast({
      title: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!",
      description: `${result.extractedText.length} ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
    })

    // Auto-generate summary and quiz
    if (result.extractedText && result.extractedText.trim().length > 50) {
      setCurrentStep("generate")
      await generateContent(result)
    }
  }

  const generateContent = async (result: { fileUrl: string; extractedText: string; fileName: string }) => {
    try {
      // Save note first
      const noteResponse = await fetch("/api/notes", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: result.fileName || "AI Study Material",
          content: result.extractedText,
          fileUrl: result.fileUrl
        }),
      })

      const noteData = await noteResponse.json()
      const noteId = noteData.success ? noteData.note.id : "temp"

      // Generate both summary and quiz
      const [summaryResponse, quizResponse] = await Promise.all([
        fetch("/api/generate-summary", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            noteId: noteId.toString(),
            content: result.extractedText,
            title: result.fileName || "AI Summary"
          }),
        }),
        fetch("/api/generate-quiz", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            noteId: noteId.toString(),
            content: result.extractedText,
            title: result.fileName || "AI Quiz",
            difficulty: "medium"
          }),
        })
      ])

      const [summaryData, quizData] = await Promise.all([
        summaryResponse.json(),
        quizResponse.json()
      ])

      if (summaryData.success) {
        setGeneratedSummary(summaryData.summary)
      }

      if (quizData.success) {
        setGeneratedQuiz(quizData.quiz)
      }

      setCurrentStep("complete")
      setIsProcessing(false)

      toast({
        title: "üéâ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!",
        description: "AI ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá",
      })

    } catch (error) {
      console.error("Generation error:", error)
      setIsProcessing(false)
      toast({
        title: "‡¶è‡¶∞‡¶∞",
        description: "‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive"
      })
    }
  }

  const handleUploadError = (error: string) => {
    setIsProcessing(false)
    toast({
      title: "‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
      description: error,
      variant: "destructive"
    })
  }

  const resetProcess = () => {
    setSelectedFile(null)
    setExtractedText("")
    setGeneratedSummary(null)
    setGeneratedQuiz(null)
    setCurrentStep("upload")
    setIsProcessing(false)
  }

  const steps = [
    { id: "upload", title: "‡¶Ü‡¶™‡¶≤‡ßã‡¶°", icon: Upload, description: "Image/PDF ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®" },
    { id: "extract", title: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü", icon: FileText, description: "AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡ßÅ‡¶®" },
    { id: "generate", title: "AI ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç", icon: Brain, description: "‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶ì ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø" },
    { id: "complete", title: "‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®", icon: CheckCircle, description: "‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§" }
  ]

  return (
    <div className="mx-auto max-w-6xl space-y-6 p-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
          ü§ñ AI Study Assistant
        </h1>
        <p className="text-lg text-neutral-600 dark:text-neutral-400">
          Image ‡¶¨‡¶æ PDF ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‚Üí AI ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡¶¨‡ßá ‚Üí ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶ì ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá
        </p>
      </div>

      {/* Progress Steps */}
      <Card className="rounded-xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-center">‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶™‡¶∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between items-center">
            {steps.map((step, index) => {
              const isActive = step.id === currentStep
              const isCompleted = steps.findIndex(s => s.id === currentStep) > index
              const Icon = step.icon

              return (
                <div key={step.id} className="flex flex-col items-center space-y-2">
                  <div className={cn(
                    "flex h-12 w-12 items-center justify-center rounded-full border-2 transition-all",
                    isCompleted ? "bg-green-500 border-green-500 text-white" :
                    isActive ? "bg-blue-500 border-blue-500 text-white" :
                    "bg-neutral-100 border-neutral-300 text-neutral-400 dark:bg-neutral-800 dark:border-neutral-600"
                  )}>
                    {isActive && isProcessing ? (
                      <Loader2 className="h-5 w-5 animate-spin" />
                    ) : (
                      <Icon className="h-5 w-5" />
                    )}
                  </div>
                  <div className="text-center">
                    <p className={cn(
                      "text-sm font-medium",
                      isCompleted || isActive ? "text-neutral-900 dark:text-neutral-100" : "text-neutral-500"
                    )}>
                      {step.title}
                    </p>
                    <p className="text-xs text-neutral-500 dark:text-neutral-400">
                      {step.description}
                    </p>
                  </div>
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Upload Section */}
      {currentStep === "upload" && (
        <Card className="rounded-xl shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Upload className="h-5 w-5" />
              ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            </CardTitle>
            <CardDescription>
              Image (JPG, PNG, WebP) ‡¶¨‡¶æ PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ AI ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶ì ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§
            </CardDescription>
          </CardHeader>
          <CardContent>
            <PdfDropzone
              onSelect={handleFileSelect}
              onUploadComplete={handleUploadComplete}
              onUploadError={handleUploadError}
            />
          </CardContent>
        </Card>
      )}

      {/* Processing Status */}
      {(currentStep === "extract" || currentStep === "generate") && (
        <Card className="rounded-xl shadow-lg border-blue-200 dark:border-blue-800">
          <CardContent className="p-6">
            <div className="flex items-center justify-center space-y-4 flex-col">
              <div className="flex items-center gap-3">
                <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
                <div>
                  <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200">
                    {currentStep === "extract" ? "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "AI ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶ì ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡ßá..."}
                  </h3>
                  <p className="text-sm text-blue-600 dark:text-blue-300">
                    {currentStep === "extract" ? 
                      "numind/NuMarkdown-8B-Thinking AI ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶°‡¶º‡¶õ‡ßá" : 
                      "AI ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá"
                    }
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Results */}
      {currentStep === "complete" && (
        <div className="space-y-6">
          {/* Success Message */}
          <Card className="rounded-xl shadow-lg border-green-200 dark:border-green-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <CheckCircle className="h-8 w-8 text-green-600" />
                  <div>
                    <h3 className="text-lg font-semibold text-green-800 dark:text-green-200">
                      üéâ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!
                    </h3>
                    <p className="text-sm text-green-600 dark:text-green-300">
                      AI ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
                    </p>
                  </div>
                </div>
                <Button onClick={resetProcess} variant="outline">
                  ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Generated Summary */}
          {generatedSummary && (
            <Card className="rounded-xl shadow-lg border-blue-200 dark:border-blue-800">
              <CardHeader>
                <CardTitle className="text-blue-800 dark:text-blue-200 flex items-center gap-2">
                  <BookOpen className="h-5 w-5" />
                  AI ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                  <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™:</h4>
                  <p className="text-sm text-blue-700 dark:text-blue-300">
                    {typeof generatedSummary.summary === 'string'
                      ? generatedSummary.summary.replace(/```json|```/g, '').trim()
                      : generatedSummary.summary}
                  </p>
                </div>

                {generatedSummary.keyPoints && (
                  <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-2">‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶∏‡¶Æ‡ßÇ‡¶π:</h4>
                    <ul className="text-sm text-purple-700 dark:text-purple-300 space-y-1">
                      {generatedSummary.keyPoints.map((point: string, index: number) => (
                        <li key={index}>‚Ä¢ {point}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Generated Quiz */}
          {generatedQuiz && (
            <Card className="rounded-xl shadow-lg border-purple-200 dark:border-purple-800 bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20">
              <CardHeader>
                <CardTitle className="text-purple-800 dark:text-purple-200 flex items-center gap-2">
                  <HelpCircle className="h-5 w-5" />
                  AI ‡¶ï‡ßÅ‡¶á‡¶ú
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {generatedQuiz.questions && generatedQuiz.questions.map((question: any, index: number) => (
                    <div key={index} className="bg-white dark:bg-neutral-800 p-4 rounded-lg border border-purple-200 dark:border-purple-700 shadow-sm">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">
                        ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® {index + 1}: {question.question}
                      </h4>
                      <div className="space-y-2">
                        {question.options && question.options.map((option: string, optIndex: number) => (
                          <div
                            key={optIndex}
                            className={cn(
                              "p-3 rounded-lg border text-sm transition-all duration-200",
                              optIndex === question.correctAnswer
                                ? "bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700 text-green-800 dark:text-green-200 shadow-sm"
                                : "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-700 text-purple-700 dark:text-purple-300 hover:bg-purple-100 dark:hover:bg-purple-900/30"
                            )}
                          >
                            <span className="font-medium text-purple-800 dark:text-purple-200">{String.fromCharCode(65 + optIndex)})</span> {option}
                            {optIndex === question.correctAnswer && (
                              <span className="ml-2 text-green-600 dark:text-green-400 font-medium">‚úì ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞</span>
                            )}
                          </div>
                        ))}
                      </div>
                      {question.explanation && (
                        <div className="mt-3 p-3 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg border border-indigo-200 dark:border-indigo-700">
                          <p className="text-sm text-indigo-700 dark:text-indigo-300">
                            <strong>‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:</strong> {question.explanation}
                          </p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Extracted Text */}
          {extractedText && (
            <Card className="rounded-xl shadow-lg">
              <CardHeader>
                <CardTitle className="text-neutral-900 dark:text-neutral-100">‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü</CardTitle>
                <CardDescription>AI ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="max-h-96 overflow-y-auto rounded-lg border p-4 bg-neutral-50 dark:bg-neutral-800">
                  <pre className="whitespace-pre-wrap text-sm text-neutral-700 dark:text-neutral-300">
                    {extractedText}
                  </pre>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Features */}
      <Card className="rounded-xl shadow-lg border-purple-200 dark:border-purple-800">
        <CardHeader>
          <CardTitle className="text-purple-800 dark:text-purple-200 flex items-center gap-2">
            üöÄ AI Features
          </CardTitle>
          <CardDescription>numind/NuMarkdown-8B-Thinking ‡¶è‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏‡¶Æ‡ßÇ‡¶π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-3">
            <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
              <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">üìñ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü</h4>
              <p className="text-sm text-blue-700 dark:text-blue-300">
                Image ‡¶è‡¶¨‡¶Ç PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶®‡ßç‡¶®‡¶§ OCR ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡ßá
              </p>
            </div>
            <div className="p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
              <h4 className="font-medium text-green-800 dark:text-green-200 mb-2">üìù ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™</h4>
              <p className="text-sm text-green-700 dark:text-green-300">
                ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶§‡ßà‡¶∞‡¶ø
              </p>
            </div>
            <div className="p-4 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg">
              <h4 className="font-medium text-orange-800 dark:text-orange-200 mb-2">‚ùì ‡¶á‡¶®‡ßç‡¶ü‡ßá‡¶≤‡¶ø‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßÅ‡¶á‡¶ú</h4>
              <p className="text-sm text-orange-700 dark:text-orange-300">
                ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ì ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶π ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßà‡¶∞‡¶ø
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}